<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LinkedList on Imaginary City</title><link>https://blog.mukyu.tw/tags/linkedlist/</link><description>Recent content in LinkedList on Imaginary City</description><generator>Hugo</generator><language>zh-tw</language><lastBuildDate>Thu, 21 Jul 2022 08:01:00 +0000</lastBuildDate><atom:link href="https://blog.mukyu.tw/tags/linkedlist/index.xml" rel="self" type="application/rss+xml"/><item><title>146. LRU Cache</title><link>https://blog.mukyu.tw/oj/leetcode/0146-lru-cache/</link><pubDate>Thu, 21 Jul 2022 08:01:00 +0000</pubDate><guid>https://blog.mukyu.tw/oj/leetcode/0146-lru-cache/</guid><description>題目 LeetCode: 146. LRU Cache Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class: LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists, otherwise return -1. void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value</description></item></channel></rss>