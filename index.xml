<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Imaginary City</title><link>https://blog.mukyu.tw/</link><description>Recent content on Imaginary City</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sun, 08 Oct 2023 12:00:00 +0000</lastBuildDate><atom:link href="https://blog.mukyu.tw/index.xml" rel="self" type="application/rss+xml"/><item><title>東京之旅</title><link>https://blog.mukyu.tw/posts/2023/10-08-tokyo/</link><pubDate>Sun, 08 Oct 2023 12:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2023/10-08-tokyo/</guid><description>台東五日遊 經過上一次阿里山之旅後，我膽子又大了一些，這次，直接出國去東京！日語只會幾句，比英文還破，卻仍然跑去東京玩。 一開始其實就只是7 月份</description></item><item><title>2023年春櫻宴</title><link>https://blog.mukyu.tw/posts/2023/06-11-touhou/</link><pubDate>Sun, 11 Jun 2023 09:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2023/06-11-touhou/</guid><description>因為疫情暫停的春櫻宴今年再度開始了，這是我第一次去的 ONLY 場次。 時間表 照例先準備好時間表了，不過其實沒有那麼實際上執行起來沒有那麼嚴謹。 在群英堂</description></item><item><title>阿里山之旅</title><link>https://blog.mukyu.tw/posts/2023/04-27-alishan/</link><pubDate>Thu, 27 Apr 2023 15:41:03 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2023/04-27-alishan/</guid><description>上一次的旅遊是去花蓮太魯閣參加路跑，是參加旅行團，所以不太需要自行規劃。 而這次算是我第一次自己規劃，自己去玩的旅遊。 其實，在過年時本來就打算</description></item><item><title>無目標的淡海輕軌一日遊</title><link>https://blog.mukyu.tw/posts/2022/11-20-danhai/</link><pubDate>Sun, 27 Nov 2022 07:20:09 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2022/11-20-danhai/</guid><description>看天氣預報後，我認為這星期六大概是「今年夏天的最後一天」，就決定跑去好幾個月就想去的地方：淡海輕軌。 這是我第一次在沒有甚麼計畫的情況下去一個</description></item><item><title>第一次出在場次 Cosplay</title><link>https://blog.mukyu.tw/posts/2022/09-06-cosplay/</link><pubDate>Tue, 06 Sep 2022 15:42:20 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2022/09-06-cosplay/</guid><description>三年前在開始有了自己的收入之後便想好好出個 Cos，但是都因為疫情推遲，而今年總算在 Cosplay 踏出了第一步。 FF39 2022/07/16 - 17 前置準備 在一個月前，我就列了前置準</description></item><item><title>146. LRU Cache</title><link>https://blog.mukyu.tw/oj/leetcode/0146-lru-cache/</link><pubDate>Thu, 21 Jul 2022 08:01:00 +0000</pubDate><guid>https://blog.mukyu.tw/oj/leetcode/0146-lru-cache/</guid><description>題目 LeetCode: 146. LRU Cache Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class: LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists, otherwise return -1. void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value</description></item><item><title>1694B. Paranoid String</title><link>https://blog.mukyu.tw/oj/codeforces/1694b-paranoid-string/</link><pubDate>Thu, 30 Jun 2022 10:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/oj/codeforces/1694b-paranoid-string/</guid><description>題目 Codeforces: 1694B: Paranoid String Let&amp;rsquo;s call a binary string 𝑇 of length 𝑚 indexed from 1 to 𝑚 paranoid if we can obtain a string of length 1 by performing the following two kinds of operations 𝑚−1 times in any order : Select any substring of 𝑇 that is equal to 01, and then replace it with 1. Select any substring of 𝑇 that is equal</description></item><item><title>1694A. Creep</title><link>https://blog.mukyu.tw/oj/codeforces/1694a-creep/</link><pubDate>Thu, 30 Jun 2022 09:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/oj/codeforces/1694a-creep/</guid><description>題目 Codeforces: 1694A: Creep Define the score of some binary string 𝑇 as the absolute difference between the number of zeroes and ones in it. (for example, 𝑇= 010001 contains 4 zeroes and 2 ones, so the score of 𝑇 is $|4−2|=2$). Define the creepiness of some binary string 𝑆 as the maximum score among all of its</description></item><item><title>1693A. Directional Increase</title><link>https://blog.mukyu.tw/oj/codeforces/1693a-directional-increase/</link><pubDate>Thu, 30 Jun 2022 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/oj/codeforces/1693a-directional-increase/</guid><description>題目 Codeforces: 1693A: Directional Increase We have an array of length n. Initially, each element is equal to 0 and there is a pointer located on the first element. We can do the following two kinds of operations any number of times (possibly zero) in any order: If the pointer is not on the last element, increase the element the pointer is currently on by 1. Then move it</description></item><item><title>2306. Naming a Company</title><link>https://blog.mukyu.tw/oj/leetcode/2306-naming-a-company/</link><pubDate>Sun, 12 Jun 2022 08:01:00 +0000</pubDate><guid>https://blog.mukyu.tw/oj/leetcode/2306-naming-a-company/</guid><description>題目 LeetCode Problem You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows: Choose 2 distinct names from ideas, call them ideaA and ideaB. Swap the first letters of ideaA and ideaB with each other. If both of the new names are not found in the</description></item><item><title>2305. Fair Distribution of Cookies</title><link>https://blog.mukyu.tw/oj/leetcode/2305-fair-distribution-of-cookies/</link><pubDate>Sun, 12 Jun 2022 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/oj/leetcode/2305-fair-distribution-of-cookies/</guid><description>題目 LeetCode Problem You are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up. The unfairness of a distribution is defined as the</description></item><item><title>2289. Steps to Make Array Non-decreasing</title><link>https://blog.mukyu.tw/oj/leetcode/2289-steps-to-make-array-non-decreasing/</link><pubDate>Sun, 01 May 2022 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/oj/leetcode/2289-steps-to-make-array-non-decreasing/</guid><description>題目 LeetCode Problem You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] &amp;gt; nums[i] for all 0 &amp;lt; i &amp;lt; nums.length. Return the number of steps performed until nums becomes a non-decreasing array. 說明 這題我在看完 Hint 後才想出來，所以紀錄一下。 一個元素</description></item><item><title>貓空攝影</title><link>https://blog.mukyu.tw/posts/2021/04-03-maokung-photo-shoot/</link><pubDate>Sat, 03 Apr 2021 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2021/04-03-maokung-photo-shoot/</guid><description>纜車 樟樹步道 貓 貓空起源？ 橋旁的狸貓茶壺？</description></item><item><title>西門町攝影</title><link>https://blog.mukyu.tw/posts/2021/01-17-ximending-photo-shoot/</link><pubDate>Sun, 17 Jan 2021 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2021/01-17-ximending-photo-shoot/</guid><description>萬年商業大樓 吉天元拉麵 「入口」 紅樓</description></item><item><title>2020 回顧與新年希望</title><link>https://blog.mukyu.tw/posts/2021/01-01-2020-end-of-year/</link><pubDate>Fri, 01 Jan 2021 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2021/01-01-2020-end-of-year/</guid><description>2020 回顧與新年希望 2020 年將近尾聲，是時候對這一年做點總結，並且準備下一年的目標了。 Appier 在這間公司待超過一年了，也開始接觸到一些比較緊急的任務。 運動</description></item><item><title>日環食 2020</title><link>https://blog.mukyu.tw/posts/2020/06-21-solar-eclipse-2020/</link><pubDate>Sun, 21 Jun 2020 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2020/06-21-solar-eclipse-2020/</guid><description>2020 年日環食 這次日環食是一百年來的唯一一次，下次要看要等一百多年之後。 觀察地點 在台灣要跑到嘉義附近才可以看到，在台北只能看到日偏蝕。 照片 我並沒</description></item><item><title>2019 年歲末回顧</title><link>https://blog.mukyu.tw/posts/2020/01-18-2019-end-of-the-year/</link><pubDate>Sat, 18 Jan 2020 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2020/01-18-2019-end-of-the-year/</guid><description>Appier 在 2019 年下半年，我從碩班畢業，並且進了 Appier 。 這幾個月我基本上都在寫 Server 。和我以前不一樣的地方，出在了 Server 各方面的重要性質。而這是我以前都不會去注意</description></item><item><title>碩二下回顧</title><link>https://blog.mukyu.tw/posts/2019/07-23-master-second-spring/</link><pubDate>Tue, 23 Jul 2019 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2019/07-23-master-second-spring/</guid><description>這半年會是我碩士最後的半年，我的碩論和口試也在這學期完成。 課程 數位聲音藝術與創作 這門課是今年新開的，課程內容主要是教如何用 PureData 以及類似的工具製</description></item><item><title>PbrtCraft 進度二</title><link>https://blog.mukyu.tw/posts/2019/02-01-pbrtcraft-episode-2/</link><pubDate>Fri, 01 Feb 2019 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2019/02-01-pbrtcraft-episode-2/</guid><description>點我到上一次進度 這一次進度包含物理、讀檔還有一些讓 Code 更好維護。 Pbrt-v3 我直接把之前的東西移到 pbrt-v3 了。好處不少，至少 OpenEXR 的版本比 pbrt-v2 的新了，也有 Stochastic Progressive Photon Mapping 。</description></item><item><title>碩二上總結</title><link>https://blog.mukyu.tw/posts/2019/01-31-master-second-winter/</link><pubDate>Thu, 31 Jan 2019 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2019/01-31-master-second-winter/</guid><description>讀碩的時間過得也算滿快的，一下子就要開始寫碩論準備找工作了。 課程 數位影像處理 這門課從基礎的影像處理，講到傅立葉變換、編碼、去噪 &amp;hellip; 等，想要打基</description></item><item><title>PbrtCraft 用 pbrt 畫 Minecraft 遊戲場景</title><link>https://blog.mukyu.tw/posts/2019/01-12-pbrtcraft-episode-1/</link><pubDate>Sat, 12 Jan 2019 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2019/01-12-pbrtcraft-episode-1/</guid><description>這是一個在學期中忽然有要做的專案：把 Minecraft 的遊戲畫面用基於物理方式，像是光線追蹤或光子映射的方式畫出來。 我已經先在 Github 上開了 PbrtCraft 。 流程 我目前弄的 Pipeline 就</description></item><item><title>Recording Gaming Moment</title><link>https://blog.mukyu.tw/posts/2018/09-12-record-gaming-moment/</link><pubDate>Wed, 12 Sep 2018 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2018/09-12-record-gaming-moment/</guid><description>最近嘗試錄製 FTB Lite 3.0 的影片，發現聲音很糟。 OBS 我是用 OBS 作為錄製工具，一方面來說之前我也拿來在 Twitch 上直播。 在聲音方面是因為聲音是擷取自麥克，所以來看</description></item><item><title>碩一下總結</title><link>https://blog.mukyu.tw/posts/2018/08-14-master-first-spring/</link><pubDate>Tue, 14 Aug 2018 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2018/08-14-master-first-spring/</guid><description>碩士一年級結束！接下來就是要把碩論弄出來的一年了！ 課程 有日文下、 VFX 和 數值方法。 日文下 上完日文下後再努力一些應該是可以去考 N4 。 VFX 一個很扎實的數</description></item><item><title>碩一上總結</title><link>https://blog.mukyu.tw/posts/2018/02-12-master-first-winter/</link><pubDate>Mon, 12 Feb 2018 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2018/02-12-master-first-winter/</guid><description>Lab 讀書會 ICP : Iterative Closest Point 看了幾篇 Point Aligment 的論文，主要是繼續一個學長碩論的主題。 其他 被指派去收尾一個跟 FreeCAD + 3D Printer 有關的專案，還滿有趣的，主要是用 Python 寫 FreeCAD 的插</description></item><item><title>大四下總結</title><link>https://blog.mukyu.tw/posts/2017/07-26-ntu-senior-spring-semester/</link><pubDate>Wed, 26 Jul 2017 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2017/07-26-ntu-senior-spring-semester/</guid><description>概略 這學期做出了很多重大的決定，像是有關研究所、研究所畢業後的安排，假如能早個幾年就做出這樣的決定或許執行起來會比較容易吧。 文傾 Littale 3月封測後</description></item><item><title>台南三日遊</title><link>https://blog.mukyu.tw/posts/2017/06-28-tainan-travelling/</link><pubDate>Wed, 28 Jun 2017 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2017/06-28-tainan-travelling/</guid><description>期末挖出了三天和老媽一起到台南旅遊，並沒有特別設計什麼行程，總之就是待在台南三天，吃遍➕玩遍台南。 我媽很喜歡到處去吃些小吃，不過並不是大吃特</description></item><item><title>2017 Google Code Jam</title><link>https://blog.mukyu.tw/posts/2017/05-22-2017-google-code-jam/</link><pubDate>Mon, 22 May 2017 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2017/05-22-2017-google-code-jam/</guid><description>兩年前參加過，但在 Round1 就被刷掉了，今年用 Python 喇Round1 題目竟然過了，可惜 Round2 還是沒過。 Qualification 只把 A small-big, B small-big, C small 做完 A : Oversized Pancake Flipper 給一串01序列和正整數$</description></item><item><title>考駕照</title><link>https://blog.mukyu.tw/posts/2017/01-25-get-driver-license/</link><pubDate>Wed, 25 Jan 2017 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2017/01-25-get-driver-license/</guid><description>由於今年五月後考駕照會需要上路，在老媽催趕下（自己一開始是滿被動的，不過仔細想確實有些重要），報了家附近的駕訓班。 筆試（交通規則） 駕訓班有提</description></item><item><title>一行的Python3</title><link>https://blog.mukyu.tw/posts/2016/03-13-one-line-python/</link><pubDate>Sun, 13 Mar 2016 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2016/03-13-one-line-python/</guid><description>因為某些原因，最近開始喜歡上一行Python解問題了！ A+B problem 事情的開端就是這題，一開始我突然想到，直接用一行就好了 1 print(int(input()) + int(input())) 由於input順序不</description></item><item><title>Java 呼叫 c++ 函數</title><link>https://blog.mukyu.tw/posts/2015/12-30-java-call-c-functions/</link><pubDate>Wed, 30 Dec 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/12-30-java-call-c-functions/</guid><description>最近課業需要查了一下，並且在 Mac 上弄出來。 第一步 先準備一個Sample1.java 1 2 3 4 5 6 7 8 9 10 11 12 public class Sample1 { public native void func1(); public static void main(String[] args) { Sample1 sample = new</description></item><item><title>期末廢文大賽排行榜製作</title><link>https://blog.mukyu.tw/posts/2015/08-09-final-competition-dumping-words/</link><pubDate>Sun, 09 Aug 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/08-09-final-competition-dumping-words/</guid><description>原因 一開始是在期末窮極無聊的時候發起了一個活動期末廢文大賽，然後四五天過後，發文人數意外的多，還有幾篇讚數也快突破天際了 看來大家的期末都好崩</description></item><item><title>區間相異元素個數</title><link>https://blog.mukyu.tw/posts/2015/08-05-acm-different-number-of-elements/</link><pubDate>Wed, 05 Aug 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/08-05-acm-different-number-of-elements/</guid><description>最近又看了一些東西，決定來整理一下。 首先是完整的問題定義： 給一個數列和一堆區間查詢，每次要回答區間內有多少相異元素個數。 離線處理 最一開始的作</description></item><item><title>BOBERT - Stick values</title><link>https://blog.mukyu.tw/posts/2015/06-07-acm-bobert-stick-values/</link><pubDate>Sun, 07 Jun 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/06-07-acm-bobert-stick-values/</guid><description>第一次好好壓複雜度，然後把題目AC，紀錄一下XD 原題連結 題目 給一個序列 $a_0 \dots a_{N-1}$ ，和 $s$ 個棒子，所有棒子的長度和 = $N$，現在我們要用這些棒子蓋滿</description></item><item><title>CRPG 進度筆記</title><link>https://blog.mukyu.tw/posts/2015/06-02-crpg-progress-note/</link><pubDate>Tue, 02 Jun 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/06-02-crpg-progress-note/</guid><description>CRPG基本上進入收尾，除了加一些新功能，還弄了一些有助於Debug的小工具，之後便會focus在建立大型測試上，可以順便把必要支援的事件功</description></item><item><title>Codeforce 542 D. Superhero's Job</title><link>https://blog.mukyu.tw/posts/2015/05-24-acm-codeforce-542-d-superheros-job/</link><pubDate>Sun, 24 May 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/05-24-acm-codeforce-542-d-superheros-job/</guid><description>頗好玩的一題。 給定 $ 1 \leq n \leq 10^{12}$ ，求 $J(x) = n$ 的解的個數，其中 $$ x = p_1^{\alpha_1}p_2^{\alpha_2} \dots $$ $$ J(x) = (1 + p_1^{\alpha_1})(1 + p_2^{\alpha_2}) \dots $$ 時限: 2000ms 主要就是枚舉出合理的因數，然後dfs或dp，</description></item><item><title>在OpenGL繪製中文字</title><link>https://blog.mukyu.tw/posts/2015/03-20-opengl-rendering-of-text/</link><pubDate>Fri, 20 Mar 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/03-20-opengl-rendering-of-text/</guid><description>在OpenGL裏畫中文字一直是個蛋疼的問題，之前有找過一些Library像是Freetype GL，但對我的需求來說算滿大的，所以打算自己刻一</description></item><item><title>15-puzzle</title><link>https://blog.mukyu.tw/posts/2015/03-08-note-15-puzzle/</link><pubDate>Sun, 08 Mar 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/03-08-note-15-puzzle/</guid><description>上週的AI課最後提到了8-puzzle，突然想起TIOJ也有一題：15-puzzle 基本上8-puzzle和15-puzzle是不同層級的X</description></item><item><title>CRPG 進度筆記</title><link>https://blog.mukyu.tw/posts/2015/02-17-crpg-progress-note/</link><pubDate>Tue, 17 Feb 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/02-17-crpg-progress-note/</guid><description>最近弄了很多東西進去，寫一寫當作備忘好了。之後大概要調整架構＋新增功能＋弄一些小的測試用遊戲。 大致有幾個重要的更新： 跨 Windows 和 Mac OX 這就是刻crp</description></item><item><title>CRPG 第二階段完成</title><link>https://blog.mukyu.tw/posts/2015/01-25-crpg-stage2/</link><pubDate>Sun, 25 Jan 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/01-25-crpg-stage2/</guid><description>第二階段主要是把功能補到可以讓一個小小的遊戲運行。終於告一段落了（癱 文件神馬的就先等最後階段吧（滾（被揍 小小的遊戲 目前只能在mac上編譯。 玩</description></item><item><title>動態存取第k大</title><link>https://blog.mukyu.tw/posts/2015/01-19-dynamic-access-k-th/</link><pubDate>Mon, 19 Jan 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/01-19-dynamic-access-k-th/</guid><description>動態存取第k大 動態第k大是個實在是有點麻煩的東西，因為set裏面並沒有提供類似的操作，像是nth_element()之類的東西． 線段樹 假如可</description></item><item><title>OpenAL 簡易教學</title><link>https://blog.mukyu.tw/posts/2015/01-13-simple-openal-coding/</link><pubDate>Tue, 13 Jan 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/01-13-simple-openal-coding/</guid><description>要使用OpenAL，首先要知道裡面的四個東西： context: 要播放聲音的地方，可以想成OpenGL裡面的Window listener: OpenAL 支援3D音效，所以聽者的資訊是很</description></item><item><title>RPG引擎 - CRPG</title><link>https://blog.mukyu.tw/posts/2015/01-02-crpg-another-rpg-engine/</link><pubDate>Fri, 02 Jan 2015 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2015/01-02-crpg-another-rpg-engine/</guid><description>這兩週全在寫一個跨平台的RPG引擎，來記錄一下第一階段所達成的 最近換了mac，想說要是能夠Mac上玩恐怖RPG那該有多好，可是大多經典恐怖R</description></item><item><title>C和Python混和編程</title><link>https://blog.mukyu.tw/posts/2014/12-21-c-add-python-mixed-programming/</link><pubDate>Sun, 21 Dec 2014 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2014/12-21-c-add-python-mixed-programming/</guid><description>昨天我心血來潮，看看有沒有辦法讓C像Python一樣把其他Python檔案Import進來，並且呼叫使用他們的函數，這不難查，很快就查到大量</description></item><item><title>因式分解一個有限域多項式</title><link>https://blog.mukyu.tw/posts/2014/12-18-factoring-polynomials-over-finite-fields/</link><pubDate>Thu, 18 Dec 2014 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2014/12-18-factoring-polynomials-over-finite-fields/</guid><description>是在前幾天的代導課，老師上完Berlekamp&amp;rsquo;s Algorithm後，就說把它刻出來就可以加分XD．那就來寫吧，反正這比賽時也</description></item><item><title>Count on Totient Function</title><link>https://blog.mukyu.tw/posts/2014/11-03-count-on-totient-function/</link><pubDate>Mon, 03 Nov 2014 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2014/11-03-count-on-totient-function/</guid><description>到這麼多COT題目，也來跟風(X 問題 給你一個n( $n &amp;lt; 10^{10}$ )，問是否存在 $x$ 使得 $\phi(x)=n$ 。題目會有多筆詢問。 題解 以下 $d(n)$ 表n的因數個數。 首先可以把 $\phi(x)$ 展開 $$</description></item><item><title>我的第一個Online Judge</title><link>https://blog.mukyu.tw/posts/2014/11-01-my-first-online-judge/</link><pubDate>Sat, 01 Nov 2014 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2014/11-01-my-first-online-judge/</guid><description>是這樣的，在開學期間左右，培訓班的助教要我們每隊生出三題， 生完題目後照理應該是OK了，可是我覺得還沒有，因為我突然想要開始寫Online Judge XDD</description></item><item><title>Sqlite3 in C</title><link>https://blog.mukyu.tw/posts/2014/09-22-sqlite-in-c/</link><pubDate>Mon, 22 Sep 2014 08:00:00 +0000</pubDate><guid>https://blog.mukyu.tw/posts/2014/09-22-sqlite-in-c/</guid><description>Sqlite3 in C 最近在弄一些東西的時後發現有時會想要實作一些構想 然後又大概只是實驗性質的，資料庫內的資料並不會爆炸 Sqlite 就變成首選啦！ 首先要在linux底</description></item></channel></rss>